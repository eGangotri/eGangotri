apply plugin: 'application'
apply plugin: 'groovy'
apply from: 'build_upload_task.gradle'

//https://medium.com/@jonashavers/how-to-activate-type-checking-for-all-groovy-classes-57ce785d5028
compileGroovy.groovyOptions.configurationScript = file('gradle/config/groovyc.groovy')

mainClassName = "com.egangotri.upload.archive.UploadToArchive"
version=""
repositories {
    mavenCentral()
    maven {
        url "http://repo.jenkins-ci.org/releases"
    }
}

compileJava.options.encoding = 'UTF-8'
compileGroovy.options.encoding = 'UTF-8'


sourceSets {
    main {
        groovy {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
    }

    test {
        groovy {
            srcDirs = ['test']
        }
    }
}



/**
 * To use Aguments
 * With JAR use: java -jar eGangotri-all-1.0.jar  lk jk
 * From Command Line: 'groovy com/egangotri/ upload/gmail/LoginToGmail.groovy lk jk'
    Command Line should also have the vm argumen for the Selenium jar path
 *  With Gradle: gradle loginToGmail is enough
 * //Arguments will be picked from args below
 */
task loginToGoogleDrive(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.upload.gmail.LoginToGoogleDrive"
    args =   [ "ANON3"  ]
    jvmArgs = applicationDefaultJvmArgs
}

task uploadToGoogleDrive(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.upload.gmail.UploadToGoogleDrive"
    args = [ "MM", "BM" ]
    jvmArgs = applicationDefaultJvmArgs
}

task loginToArchive(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.upload.archive.LoginToArchive"
    jvmArgs = applicationDefaultJvmArgs
    args = ["VED_MANDIR" ]
}

task fileMover(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    println "FileMover: ${sourceSets.main.runtimeClasspath}"
    main = "com.egangotri.mover.FileMover"
    jvmArgs = applicationDefaultJvmArgs
    args = [  "VED_MANDIR", "true" ] //"VN", "VN2" , "JNGM_BOOKS","KHEM","SMP_PHD"
}

task zipMover(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    println "FileMover: ${sourceSets.main.runtimeClasspath}"
    main = "com.egangotri.mover.ZipMover"
    jvmArgs = applicationDefaultJvmArgs
    args = [ ]
}

task bookTitles(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.pdf.BookTitles"
    //args = [folder, date in DD-MM-YYYY FORMAT OR today , hour only]
    //args = [ "D:\\Treasures28\\bala, D:\\Treasures28\\raja", '25-08-2020', '5']
    //args = [ "D:\\Treasures28\\bala, D:\\Treasures28\\raja", 'today', '5']
    //args = [ "D:\\Treasures28\\bala, D:\\Treasures28\\raja", 'today-5', '5']
    //
    args = [ "D:\\Treasures30\\_freeze"]
  //  args = [ "D:\\Treasures28\\smp , D:\\Treasures28\\JNGM ,D:\\Treasures28\\bdmm",'today-1', 12]
}

task chkMissingInArchive(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.upload.archive.CheckForMissingTextsInArchive"
    jvmArgs = applicationDefaultJvmArgs
    args = []
}

task get1stAndLastPages(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.pdf.GetFirstAndLastPages"
    args = [""]
}

task refreshFocusLogFiles(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.upload.archive.StartFreshLogFile"
    args = [""]
}

//task UploadToArchiveAndGoogleDrive(dependsOn: 'classes', type: JavaExec) {
//    classpath = sourceSets.main.runtimeClasspath
//    println "UploadToArchiveAndGoogleDrive: ${sourceSets.main.runtimeClasspath}"
//    main = "com.egangotri.upload.UploadToArchiveAndGoogleDrive"
//    jvmArgs = applicationDefaultJvmArgs
//    args = [ "-a=DT, RK, IB, JG", "-u=BM, MM"]
//}


configurations {
    tests
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:3.0.3'
    compile 'org.codehaus.gpars:gpars:1.2.1'


    compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2'
    compile group: 'com.opencsv', name: 'opencsv', version: '5.1'
    compile 'com.itextpdf:itextpdf:5.5.13.1'
    compile 'org.apache.poi:poi:4.1.2'
    compile 'commons-io:commons-io:2.6'

    compile group: 'org.codehaus.groovy', name: 'groovy-ant', version: '3.0.3'

    compile 'javax.mail:mail:1.5.0-b01'
    compile group: 'com.sun.mail', name: 'jakarta.mail', version: '1.6.5'

    compile "ch.qos.logback:logback-classic:1.1.3"
    compile "org.slf4j:log4j-over-slf4j:1.7.13"

    //The Only reason we are keeping this local
    //which has the META-INF\LICENSE Folder deleted is because during fat-jar
    //task the unzipping has conflicts.
    //For all other purposes best to use, maven repo standalone;commented below
    //compile files('lib/sss.jar')
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-firefox-driver
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.0.0-alpha-6'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '4.0.0-alpha-6'

    testCompile 'org.spockframework:spock-core:2.0-M2-groovy-3.0'
    testCompile 'junit:junit:4.13'
}



task fatJarEGangotri(type: Jar) {
    //delete "$buildDir/tmp/expandedArchives"
    baseName = project.name /*+ '-all'*/
    from { (configurations.compile + configurations.runtime).collect { it.isDirectory() ? it : zipTree(it) } }
    println 'creating jar'
    with jar
    manifest {
        attributes 'Implementation-Title': 'eGangotri Programming Tools', 'Implementation-Version': version
        attributes 'Main-Class': mainClassName
    }
}

task fatJar(dependsOn:[fatJarEGangotri]) {
    doLast {
        println 'copying jar file from libs->latestJarForUse'
        copy {
            from "build/libs/"
            into 'latestJarForUse'
            include '*.jar'
        }
    }
}