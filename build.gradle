apply plugin: 'application'
apply plugin: 'groovy'

mainClassName = "com.egangotri.upload.gmail.LoginToGmail"
applicationDefaultJvmArgs = ["-Dwebdriver.chrome.driver=${System.getProperty('user.home')}/chromedriver/chromedriver.exe"]
version=1.0
repositories {
    mavenCentral()
    maven {
        url "http://repo.jenkins-ci.org/releases"
    }
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src']
        }
    }

    test {
        groovy {
            srcDirs = ['test']
        }
    }
}

/**
 * To use Aguments
 * With JAR use: java -jar eGangotri-all-1.0.jar  lk jk
 * From Command Line: 'groovy com/egangotri/upload/gmail/LoginToGmail.groovy lk jk'
    Command Line should also have the vm argument for the Selenium jar path
 *  With Gradle: gradle loginToGmail is enough
 * //Arguments will be picked from args below
 */
task LoginToGmail(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    println "loginToGmail: ${sourceSets.main.runtimeClasspath}"
    main = "com.egangotri.upload.gmail.LoginToGmail"
    args = ["sr", "lk", "jm"] //["jm", "lk", "sr"] // "bm", "mm", "jm" , "lk", "sr", "srCP" , "ij", "srb1", gb11
    jvmArgs = applicationDefaultJvmArgs
}

task UploadToGmail(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    println "loginToGmail: ${sourceSets.main.runtimeClasspath}"
    main = "com.egangotri.upload.gmail.UploadToGmail"
    args = ["mm", "bm"]
    jvmArgs = applicationDefaultJvmArgs
}

task UploadToArchive(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    println "uploadToArchive: ${sourceSets.main.runtimeClasspath}"
    main = "com.egangotri.upload.archive.UploadToArchive"
    jvmArgs = applicationDefaultJvmArgs
    args = ["rk", "jg", "ib", "dt"]
}

task UploadToArchiveAndGmail(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    println "UploadToArchiveAndGmail: ${sourceSets.main.runtimeClasspath}"
    main = "com.egangotri.upload.UploadToArchiveAndGmail"
    jvmArgs = applicationDefaultJvmArgs
    args = [ "-u=dt, rk, ib, jg", "-a=bm, mm"]
}

task FileMover(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    println "FileMover: ${sourceSets.main.runtimeClasspath}"
    main = "com.egangotri.mover.FileMover"
    jvmArgs = applicationDefaultJvmArgs
    args = ["dt", "sr", "jg"]
}
configurations {
    tests
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.4'
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'javax.mail:mail:1.4'
    compile 'com.itextpdf:itextpdf:5.5.8'
    compile 'com.itextpdf:itext-xtra:5.1.3'
    compile 'org.codehaus.geb:geb-core:0.7.2'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.ant:ant:1.9.6'
    compile 'org.slf4j:slf4j-simple:1.7.16'
    compile 'org.slf4j:slf4j-api:1.7.16'
    compile 'org.seleniumhq.selenium:selenium-server-standalone:2.48.2'


    //The Only reason we are keeping this local
    //which has the META-INF\LICENSE Folder deleted is because during fat-jar
    //task the unzipping has conflicts.
    //For all other purposes best to use, maven repo standalone;commented below
    //compile files('lib/sss.jar')

    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'junit:junit:4.12'
}


task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { (configurations.compile + configurations.runtime).collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    manifest {
        attributes 'Implementation-Title': 'eGangotri Programming Tools', 'Implementation-Version': version
        attributes 'Main-Class': mainClassName
    }
}