apply plugin: 'application'
apply plugin: 'groovy'

mainClassName = "com.egangotri.upload.archive.UploadToArchive"
applicationDefaultJvmArgs = ["-Dwebdriver.chrome.driver=${System.getProperty('user.home')}${File.separator}chromedriver${File.separator}chromedriver.exe"]
/*, "-Dwebdriver.firefox.driver=${System.getProperty('user.home')}/firefoxdriver/geckodriver.exe"*/
version=""
repositories {
    mavenCentral()
    maven {
        url "http://repo.jenkins-ci.org/releases"
    }
}

compileJava.options.encoding = 'UTF-8'
compileGroovy.options.encoding = 'UTF-8'


sourceSets {
    main {
        groovy {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
    }

    test {
        groovy {
            srcDirs = ['test']
        }
    }
}

/**
 * To use Aguments
 * With JAR use: java -jar eGangotri-all-1.0.jar  lk jk
 * From Command Line: 'groovy com/egangotri/ upload/gmail/LoginToGmail.groovy lk jk'
    Command Line should also have the vm argumen for the Selenium jar path
 *  With Gradle: gradle loginToGmail is enough
 * //Arguments will be picked from args below
 */
task loginToGoogleDrive(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.upload.gmail.LoginToGoogleDrive"
    args =   [  "im", "im2", "im3", "im4" ] //"JM", "LK","DD", "RK", "BM", "MM", "jm" , "lk", "sr", "srCP" , "ij", "srb1", gb11
    jvmArgs = applicationDefaultJvmArgs
}

task uploadToGoogleDrive(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.upload.gmail.UploadToGoogleDrive"
    args = ["MM"/*,"BM"*/ ]
    jvmArgs = applicationDefaultJvmArgs
}


task uploadToArchive(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.upload.archive.UploadToArchive"
    jvmArgs = applicationDefaultJvmArgs
  args = [  "ISHWAR2"]
  // /* "UPSS2" , "TMKN","IB" , ,"KRI", "KRI_19TH_CENT" , "KRI_UR",,"DT" "ANON", "UPSS""DT" "RK" "NK","IB", "LCKN_POST57"   "RK","SR"   ,  "RK","IB","JG"*/ /*,,"DT", "KALLA",, "UPSS",   "UR",  "ANON" , "MS" ,"SR" ,"RK","SBLK" ,"SBLK2"*/]
}

task chkMissingInArchive(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.upload.archive.CheckForMissingTextsInArchive"
    jvmArgs = applicationDefaultJvmArgs
    args = []// "TMKN"/*"TMKN","IB" , ,"KRI", "KRI_19TH_CENT" , "KRI_UR",,"DT" "ANON", "UPSS""DT" "RK" "NK","IB", "LCKN_POST57"   "RK","SR"   ,  "RK","IB","JG"*/ /*,,"DT", "KALLA",, "UPSS",   "UR",  "ANON" , "MS" ,"SR" ,"RK","SBLK" ,"SBLK2"*/]
}

task bookTitles(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.pdf.BookTitles"
    args = [ "C:\\Treasures12\\kri"]
}

task get1stAndLastPages(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.egangotri.pdf.GetFirstAndLastPages"
    args = [""]
}

//task UploadToArchiveAndGoogleDrive(dependsOn: 'classes', type: JavaExec) {
//    classpath = sourceSets.main.runtimeClasspath
//    println "UploadToArchiveAndGoogleDrive: ${sourceSets.main.runtimeClasspath}"
//    main = "com.egangotri.upload.UploadToArchiveAndGoogleDrive"
//    jvmArgs = applicationDefaultJvmArgs
//    args = [ "-a=DT, RK, IB, JG", "-u=BM, MM"]
//}

task fileMover(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    println "FileMover: ${sourceSets.main.runtimeClasspath}"
    main = "com.egangotri.mover.FileMover"
    jvmArgs = applicationDefaultJvmArgs
    args = [  "DT", "UPSS" ,"KRI_UR","KRI"/*, "KRI_19TH_CENT" ,"DT", "UPSS" ,"RK", "KALLA", "SBLK", "SBLK2" ,"NK", "UR",  "MS", "NR"*/]

}
    
configurations {
    tests
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.4'
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'javax.mail:mail:1.4'
    compile 'com.itextpdf:itextpdf:5.5.8'
/*
    compile 'com.itextpdf:itext-xta:5.1.3'
*/
    compile 'org.codehaus.geb:geb-core:0.7.2'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.ant:ant:1.9.6'
   compile 'org.seleniumhq.selenium:selenium-server-standalone:2.48.2'
    compile 'org.apache.poi:poi:3.13'
    /*   compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.5'
       compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.5'
       compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.5'*/

    compile "ch.qos.logback:logback-classic:1.1.3"
    compile "org.slf4j:log4j-over-slf4j:1.7.13"

    //The Only reason we are keeping this local
    //which has the META-INF\LICENSE Folder deleted is because during fat-jar
    //task the unzipping has conflicts.
    //For all other purposes best to use, maven repo standalone;commented below
    //compile files('lib/sss.jar')
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-firefox-driver
    compile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: '3.0.1'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '3.0.1'
    compile group: 'org.codehaus.geb', name: 'geb-core', version: '0.7.2'

    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'junit:junit:4.12'
}



task fatJarEGangotri(type: Jar) {
    //delete "$buildDir/tmp/expandedArchives"
    baseName = project.name /*+ '-all'*/
    from { (configurations.compile + configurations.runtime).collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    manifest {
        attributes 'Implementation-Title': 'eGangotri Programming Tools', 'Implementation-Version': version
        attributes 'Main-Class': mainClassName
    }
}

task fatJar(dependsOn:[fatJarEGangotri]){
    doLast {
        println 'jarring'
        copy {
            from "build/libs/"
            into 'latestJarForUse'
            include '*.jar'
        }
    }
}